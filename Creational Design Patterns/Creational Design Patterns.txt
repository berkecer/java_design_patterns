SINGLETON DESIGN PATTERN
-------------------------
Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the java virtual machine.

The singleton class must provide a global access point to get the instance of the class.

Singleton pattern is used for logging, drivers objects, caching and thread pool.

Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc.

Singleton design pattern is used in core java classes also, for example java.lang.Runtime, java.awt.Desktop.



FACTORY DESIGN PATTERN
----------------------

Factory design pattern is used when we have a super class with multiple sub-classes and based on input, 
we need to return one of the sub-class. 

This pattern take out the responsibility of instantiation of a class from client program to the factory class. 

In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created
object using a common interface.



ABSTRACT FACTORY DESIGN PATTERN
-------------------------------

In Factory pattern we have a single Factory class. 
This factory class returns different subclasses based on the input provided and factory class uses if-else or switch statement
to achieve this.

In the Abstract Factory pattern, we get rid of if-else block and have a factory class for each sub-class. 
Then an Abstract Factory class that will return the sub-class based on the input factory class.

Abstract factory provides us a new layer between client and our factories.

We can easily add new object models and their factories. 